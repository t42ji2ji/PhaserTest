var $bcdfcb5dd7ecafc7bb67e3cd252d0c2$exports = {};

/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2020 Photon Storm Ltd.
 * @license      {@link https://opensource.org/licenses/MIT|MIT License}
 */
var $bcdfcb5dd7ecafc7bb67e3cd252d0c2$var$Class = $parcel$require("0bcdfcb5dd7ecafc7bb67e3cd252d0c2", "../../utils/Class");
var $bcdfcb5dd7ecafc7bb67e3cd252d0c2$var$Components = $parcel$require("0bcdfcb5dd7ecafc7bb67e3cd252d0c2", "../components");
var $bcdfcb5dd7ecafc7bb67e3cd252d0c2$var$GameObject = $parcel$require("0bcdfcb5dd7ecafc7bb67e3cd252d0c2", "../GameObject");
var $bcdfcb5dd7ecafc7bb67e3cd252d0c2$var$MeshRender = $parcel$require("0bcdfcb5dd7ecafc7bb67e3cd252d0c2", "./MeshRender");
var $bcdfcb5dd7ecafc7bb67e3cd252d0c2$var$NOOP = $parcel$require("0bcdfcb5dd7ecafc7bb67e3cd252d0c2", "../../utils/NOOP");
/**
 * @classdesc
 * A Mesh Game Object.
 *
 * @class Mesh
 * @extends Phaser.GameObjects.GameObject
 * @memberof Phaser.GameObjects
 * @constructor
 * @webglOnly
 * @since 3.0.0
 *
 * @extends Phaser.GameObjects.Components.BlendMode
 * @extends Phaser.GameObjects.Components.Depth
 * @extends Phaser.GameObjects.Components.Mask
 * @extends Phaser.GameObjects.Components.Pipeline
 * @extends Phaser.GameObjects.Components.Size
 * @extends Phaser.GameObjects.Components.Texture
 * @extends Phaser.GameObjects.Components.Transform
 * @extends Phaser.GameObjects.Components.Visible
 * @extends Phaser.GameObjects.Components.ScrollFactor
 *
 * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.
 * @param {number} x - The horizontal position of this Game Object in the world.
 * @param {number} y - The vertical position of this Game Object in the world.
 * @param {number[]} vertices - An array containing the vertices data for this Mesh.
 * @param {number[]} uv - An array containing the uv data for this Mesh.
 * @param {number[]} colors - An array containing the color data for this Mesh.
 * @param {number[]} alphas - An array containing the alpha data for this Mesh.
 * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.
 * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.
 */

var $bcdfcb5dd7ecafc7bb67e3cd252d0c2$var$Mesh = new $bcdfcb5dd7ecafc7bb67e3cd252d0c2$var$Class({
  Extends: $bcdfcb5dd7ecafc7bb67e3cd252d0c2$var$GameObject,
  Mixins: [$bcdfcb5dd7ecafc7bb67e3cd252d0c2$var$Components.BlendMode, $bcdfcb5dd7ecafc7bb67e3cd252d0c2$var$Components.Depth, $bcdfcb5dd7ecafc7bb67e3cd252d0c2$var$Components.Mask, $bcdfcb5dd7ecafc7bb67e3cd252d0c2$var$Components.Pipeline, $bcdfcb5dd7ecafc7bb67e3cd252d0c2$var$Components.Size, $bcdfcb5dd7ecafc7bb67e3cd252d0c2$var$Components.Texture, $bcdfcb5dd7ecafc7bb67e3cd252d0c2$var$Components.Transform, $bcdfcb5dd7ecafc7bb67e3cd252d0c2$var$Components.Visible, $bcdfcb5dd7ecafc7bb67e3cd252d0c2$var$Components.ScrollFactor, $bcdfcb5dd7ecafc7bb67e3cd252d0c2$var$MeshRender],
  initialize: function Mesh(scene, x, y, vertices, uv, colors, alphas, texture, frame) {
    $bcdfcb5dd7ecafc7bb67e3cd252d0c2$var$GameObject.call(this, scene, 'Mesh');

    if (vertices.length !== uv.length) {
      throw new Error('Mesh Vertex count must match UV count');
    }

    var verticesUB = vertices.length / 2 | 0;

    if (colors.length > 0 && colors.length < verticesUB) {
      throw new Error('Mesh Color count must match Vertex count');
    }

    if (alphas.length > 0 && alphas.length < verticesUB) {
      throw new Error('Mesh Alpha count must match Vertex count');
    }

    var i;

    if (colors.length === 0) {
      for (i = 0; i < verticesUB; ++i) {
        colors[i] = 0xFFFFFF;
      }
    }

    if (alphas.length === 0) {
      for (i = 0; i < verticesUB; ++i) {
        alphas[i] = 1.0;
      }
    }
    /**
     * An array containing the vertices data for this Mesh.
     *
     * @name Phaser.GameObjects.Mesh#vertices
     * @type {Float32Array}
     * @since 3.0.0
     */


    this.vertices = new Float32Array(vertices);
    /**
     * An array containing the uv data for this Mesh.
     *
     * @name Phaser.GameObjects.Mesh#uv
     * @type {Float32Array}
     * @since 3.0.0
     */

    this.uv = new Float32Array(uv);
    /**
     * An array containing the color data for this Mesh.
     *
     * @name Phaser.GameObjects.Mesh#colors
     * @type {Uint32Array}
     * @since 3.0.0
     */

    this.colors = new Uint32Array(colors);
    /**
     * An array containing the alpha data for this Mesh.
     *
     * @name Phaser.GameObjects.Mesh#alphas
     * @type {Float32Array}
     * @since 3.0.0
     */

    this.alphas = new Float32Array(alphas);
    /**
     * Fill or additive mode used when blending the color values?
     * 
     * @name Phaser.GameObjects.Mesh#tintFill
     * @type {boolean}
     * @default false
     * @since 3.11.0
     */

    this.tintFill = false;
    this.setTexture(texture, frame);
    this.setPosition(x, y);
    this.setSizeToFrame();
    this.initPipeline();
  },

  /**
   * This method is left intentionally empty and does not do anything.
   * It is retained to allow a Mesh or Quad to be added to a Container.
   * 
   * @method Phaser.GameObjects.Mesh#setAlpha
   * @since 3.17.0
   */
  setAlpha: $bcdfcb5dd7ecafc7bb67e3cd252d0c2$var$NOOP
});
$bcdfcb5dd7ecafc7bb67e3cd252d0c2$exports = $bcdfcb5dd7ecafc7bb67e3cd252d0c2$var$Mesh;