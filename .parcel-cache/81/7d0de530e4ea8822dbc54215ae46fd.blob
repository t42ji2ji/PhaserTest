var $dda035903f426da5a13c896b941227f5$exports = {};

/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2020 Photon Storm Ltd.
 * @license      {@link https://opensource.org/licenses/MIT|MIT License}
 */
var $dda035903f426da5a13c896b941227f5$var$Arne16 = $parcel$require("dda035903f426da5a13c896b941227f5", "./palettes/Arne16");
var $dda035903f426da5a13c896b941227f5$var$CanvasPool = $parcel$require("dda035903f426da5a13c896b941227f5", "../display/canvas/CanvasPool");
var $dda035903f426da5a13c896b941227f5$var$GetValue = $parcel$require("dda035903f426da5a13c896b941227f5", "../utils/object/GetValue");
/**
 * [description]
 *
 * @function Phaser.Create.GenerateTexture
 * @since 3.0.0
 *
 * @param {Phaser.Types.Create.GenerateTextureConfig} config - [description]
 *
 * @return {HTMLCanvasElement} [description]
 */

var $dda035903f426da5a13c896b941227f5$var$GenerateTexture = function (config) {
  var data = $dda035903f426da5a13c896b941227f5$var$GetValue(config, 'data', []);
  var canvas = $dda035903f426da5a13c896b941227f5$var$GetValue(config, 'canvas', null);
  var palette = $dda035903f426da5a13c896b941227f5$var$GetValue(config, 'palette', $dda035903f426da5a13c896b941227f5$var$Arne16);
  var pixelWidth = $dda035903f426da5a13c896b941227f5$var$GetValue(config, 'pixelWidth', 1);
  var pixelHeight = $dda035903f426da5a13c896b941227f5$var$GetValue(config, 'pixelHeight', pixelWidth);
  var resizeCanvas = $dda035903f426da5a13c896b941227f5$var$GetValue(config, 'resizeCanvas', true);
  var clearCanvas = $dda035903f426da5a13c896b941227f5$var$GetValue(config, 'clearCanvas', true);
  var preRender = $dda035903f426da5a13c896b941227f5$var$GetValue(config, 'preRender', null);
  var postRender = $dda035903f426da5a13c896b941227f5$var$GetValue(config, 'postRender', null);
  var width = Math.floor(Math.abs(data[0].length * pixelWidth));
  var height = Math.floor(Math.abs(data.length * pixelHeight));

  if (!canvas) {
    canvas = $dda035903f426da5a13c896b941227f5$var$CanvasPool.create2D(this, width, height);
    resizeCanvas = false;
    clearCanvas = false;
  }

  if (resizeCanvas) {
    canvas.width = width;
    canvas.height = height;
  }

  var ctx = canvas.getContext('2d');

  if (clearCanvas) {
    ctx.clearRect(0, 0, width, height);
  } //  preRender Callback?


  if (preRender) {
    preRender(canvas, ctx);
  } //  Draw it


  for (var y = 0; y < data.length; y++) {
    var row = data[y];

    for (var x = 0; x < row.length; x++) {
      var d = row[x];

      if (d !== '.' && d !== ' ') {
        ctx.fillStyle = palette[d];
        ctx.fillRect(x * pixelWidth, y * pixelHeight, pixelWidth, pixelHeight);
      }
    }
  } //  postRender Callback?


  if (postRender) {
    postRender(canvas, ctx);
  }

  return canvas;
};

$dda035903f426da5a13c896b941227f5$exports = $dda035903f426da5a13c896b941227f5$var$GenerateTexture;