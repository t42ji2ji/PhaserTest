/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2020 Photon Storm Ltd.
 * @license      {@link https://opensource.org/licenses/MIT|MIT License}
 */
var $bbebc7d88d2763ab901bdfab669737f8$var$Graphics = $parcel$require("bbebc7d88d2763ab901bdfab669737f8", "./Graphics");
var $bbebc7d88d2763ab901bdfab669737f8$var$GameObjectFactory = $parcel$require("bbebc7d88d2763ab901bdfab669737f8", "../GameObjectFactory");
/**
 * Creates a new Graphics Game Object and adds it to the Scene.
 *
 * Note: This method will only be available if the Graphics Game Object has been built into Phaser.
 *
 * @method Phaser.GameObjects.GameObjectFactory#graphics
 * @since 3.0.0
 *
 * @param {Phaser.Types.GameObjects.Graphics.Options} [config] - The Graphics configuration.
 *
 * @return {Phaser.GameObjects.Graphics} The Game Object that was created.
 */

$bbebc7d88d2763ab901bdfab669737f8$var$GameObjectFactory.register('graphics', function (config) {
  return this.displayList.add(new $bbebc7d88d2763ab901bdfab669737f8$var$Graphics(this.scene, config));
}); //  When registering a factory function 'this' refers to the GameObjectFactory context.
//
//  There are several properties available to use:
//
//  this.scene - a reference to the Scene that owns the GameObjectFactory
//  this.displayList - a reference to the Display List the Scene owns
//  this.updateList - a reference to the Update List the Scene owns