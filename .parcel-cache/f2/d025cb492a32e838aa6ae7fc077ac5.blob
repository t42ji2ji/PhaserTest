var $f83f61831ede90b927b5c2a03a5f$exports = {};

/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2020 Photon Storm Ltd.
 * @license      {@link https://opensource.org/licenses/MIT|MIT License}
 */
var $f83f61831ede90b927b5c2a03a5f$var$Class = $parcel$require("4022f83f61831ede90b927b5c2a03a5f", "../utils/Class");
var $f83f61831ede90b927b5c2a03a5f$var$List = $parcel$require("4022f83f61831ede90b927b5c2a03a5f", "../structs/List");
var $f83f61831ede90b927b5c2a03a5f$var$PluginCache = $parcel$require("4022f83f61831ede90b927b5c2a03a5f", "../plugins/PluginCache");
var $f83f61831ede90b927b5c2a03a5f$var$SceneEvents = $parcel$require("4022f83f61831ede90b927b5c2a03a5f", "../scene/events");
var $f83f61831ede90b927b5c2a03a5f$var$StableSort = $parcel$require("4022f83f61831ede90b927b5c2a03a5f", "../utils/array/StableSort");
/**
 * @classdesc
 * The Display List plugin.
 *
 * Display Lists belong to a Scene and maintain the list of Game Objects to render every frame.
 *
 * Some of these Game Objects may also be part of the Scene's [Update List]{@link Phaser.GameObjects.UpdateList}, for updating.
 *
 * @class DisplayList
 * @extends Phaser.Structs.List.<Phaser.GameObjects.GameObject>
 * @memberof Phaser.GameObjects
 * @constructor
 * @since 3.0.0
 *
 * @param {Phaser.Scene} scene - The Scene that this Display List belongs to.
 */

var $f83f61831ede90b927b5c2a03a5f$var$DisplayList = new $f83f61831ede90b927b5c2a03a5f$var$Class({
  Extends: $f83f61831ede90b927b5c2a03a5f$var$List,
  initialize: function DisplayList(scene) {
    $f83f61831ede90b927b5c2a03a5f$var$List.call(this, scene);
    /**
     * The flag the determines whether Game Objects should be sorted when `depthSort()` is called.
     *
     * @name Phaser.GameObjects.DisplayList#sortChildrenFlag
     * @type {boolean}
     * @default false
     * @since 3.0.0
     */

    this.sortChildrenFlag = false;
    /**
     * The Scene that this Display List belongs to.
     *
     * @name Phaser.GameObjects.DisplayList#scene
     * @type {Phaser.Scene}
     * @since 3.0.0
     */

    this.scene = scene;
    /**
     * The Scene's Systems.
     *
     * @name Phaser.GameObjects.DisplayList#systems
     * @type {Phaser.Scenes.Systems}
     * @since 3.0.0
     */

    this.systems = scene.sys;
    scene.sys.events.once($f83f61831ede90b927b5c2a03a5f$var$SceneEvents.BOOT, this.boot, this);
    scene.sys.events.on($f83f61831ede90b927b5c2a03a5f$var$SceneEvents.START, this.start, this);
  },

  /**
   * This method is called automatically, only once, when the Scene is first created.
   * Do not invoke it directly.
   *
   * @method Phaser.GameObjects.DisplayList#boot
   * @private
   * @since 3.5.1
   */
  boot: function () {
    this.systems.events.once($f83f61831ede90b927b5c2a03a5f$var$SceneEvents.DESTROY, this.destroy, this);
  },

  /**
   * This method is called automatically by the Scene when it is starting up.
   * It is responsible for creating local systems, properties and listening for Scene events.
   * Do not invoke it directly.
   *
   * @method Phaser.GameObjects.DisplayList#start
   * @private
   * @since 3.5.0
   */
  start: function () {
    this.systems.events.once($f83f61831ede90b927b5c2a03a5f$var$SceneEvents.SHUTDOWN, this.shutdown, this);
  },

  /**
   * Force a sort of the display list on the next call to depthSort.
   *
   * @method Phaser.GameObjects.DisplayList#queueDepthSort
   * @since 3.0.0
   */
  queueDepthSort: function () {
    this.sortChildrenFlag = true;
  },

  /**
   * Immediately sorts the display list if the flag is set.
   *
   * @method Phaser.GameObjects.DisplayList#depthSort
   * @since 3.0.0
   */
  depthSort: function () {
    if (this.sortChildrenFlag) {
      $f83f61831ede90b927b5c2a03a5f$var$StableSort.inplace(this.list, this.sortByDepth);
      this.sortChildrenFlag = false;
    }
  },

  /**
   * Compare the depth of two Game Objects.
   *
   * @method Phaser.GameObjects.DisplayList#sortByDepth
   * @since 3.0.0
   *
   * @param {Phaser.GameObjects.GameObject} childA - The first Game Object.
   * @param {Phaser.GameObjects.GameObject} childB - The second Game Object.
   *
   * @return {integer} The difference between the depths of each Game Object.
   */
  sortByDepth: function (childA, childB) {
    return childA._depth - childB._depth;
  },

  /**
   * Returns an array which contains all objects currently on the Display List.
   * This is a reference to the main list array, not a copy of it, so be careful not to modify it.
   *
   * @method Phaser.GameObjects.DisplayList#getChildren
   * @since 3.12.0
   *
   * @return {Phaser.GameObjects.GameObject[]} The group members.
   */
  getChildren: function () {
    return this.list;
  },

  /**
   * The Scene that owns this plugin is shutting down.
   * We need to kill and reset all internal properties as well as stop listening to Scene events.
   *
   * @method Phaser.GameObjects.DisplayList#shutdown
   * @private
   * @since 3.0.0
   */
  shutdown: function () {
    var i = this.list.length;

    while (i--) {
      this.list[i].destroy(true);
    }

    this.list.length = 0;
    this.systems.events.off($f83f61831ede90b927b5c2a03a5f$var$SceneEvents.SHUTDOWN, this.shutdown, this);
  },

  /**
   * The Scene that owns this plugin is being destroyed.
   * We need to shutdown and then kill off all external references.
   *
   * @method Phaser.GameObjects.DisplayList#destroy
   * @private
   * @since 3.0.0
   */
  destroy: function () {
    this.shutdown();
    this.scene.sys.events.off($f83f61831ede90b927b5c2a03a5f$var$SceneEvents.START, this.start, this);
    this.scene = null;
    this.systems = null;
  }
});
$f83f61831ede90b927b5c2a03a5f$var$PluginCache.register('DisplayList', $f83f61831ede90b927b5c2a03a5f$var$DisplayList, 'displayList');
$f83f61831ede90b927b5c2a03a5f$exports = $f83f61831ede90b927b5c2a03a5f$var$DisplayList;